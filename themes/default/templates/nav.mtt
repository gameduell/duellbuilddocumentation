<macro name="makeTree(tree,depth)">
	::switch tree::
	<li ::attr data_path api.getTreePath(tree)::>
        <a class="treeLink" href="::api.getTreeUrl(tree)::" title=":: api.getTreePack(tree) + api.getTreeName(tree) ::">
            <span class="pack">:: api.getTreePack(tree) ::</span>::api.getTreeName(tree)::
        </a>
	</li>
	::case::
		::if api.isStackedPackage(tree)::
			::set name = api.getStackedPackage(tree)::
			<li ::cond name.charAt(0) != "_"::
				::attr class "expando " +if (depth == 0 && api.isPlatform(name)) "platform platform-" + name else if (depth == 0) "package-" + name else "" ::>
				<a class="nav-header" href="#" onclick="return toggleCollapsed(this)">
			<i class="fa fa-arrow-circle-o-right"></i>
					::if depth == 0::
						::name.toUpperCase()::
					::else::
						::name::
					::end::
				</a>
				<ul class="nav nav-list">
					::foreach sub api.getTreesForStackedPackage(tree,name)::
						$$makeTree(::sub::,::depth + 1::)
					::end::
				</ul>
			</li>
		::else::
			::set name = args[0]::
			<li ::cond name.charAt(0) != "_"::
				::attr class "expando " +if (depth == 0 && api.isPlatform(name)) "platform platform-" + name else if (depth == 0) "package-" + name else "" ::>
				<a class="nav-header" href="#" onclick="return toggleCollapsed(this)">
			<i class="fa fa-arrow-circle-o-right"></i>
					::if depth == 0::
						::api.getTreeName(tree).toUpperCase()::
					::else::
						::api.getTreeName(tree)::
					::end::
				</a>
				<ul class="nav nav-list">
					::foreach sub args[2]::
						$$makeTree(::sub::,::depth + 1::)
					::end::
				</ul>
			</li>
		::end::
	::end::
</macro>
var navContent='<ul class="nav nav-list">
::foreach tree root::
	$$makeTree(::tree::,::0::)
::end::
</ul>
';
